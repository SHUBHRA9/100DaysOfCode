Question : Convert array into Zig-Zag fashion

Given an array arr of distinct elements of size N, the task is to rearrange the elements of the array in a zig-zag fashion so that the converted array should be in the below form: 

arr[0] < arr[1]  > arr[2] < arr[3] > arr[4] < . . . . arr[n-2] < arr[n-1] > arr[n]. 


Here, the task is to complete the function zigZag() which takes the array of integers arr and n as parameters and returns void.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints:
1 <= N <= 105
0 <= Arr[i] <= 106


Test Case 1:
Input:
N = 7
Arr[] = {4, 3, 7, 8, 6, 2, 1}
Output: 3 7 4 8 2 6 1
Explanation: 3 < 7 > 4 < 8 > 2 < 6 > 1

Test Case 2:
Input:
N = 4
Arr[] = {1, 4, 3, 2}
Output: 1 4 2 3
Explanation: 1 < 4 > 2 < 3

Test Case 3:
Input:
N=NULL
Arr[]={}
Output will not be dispalyed as there is no input, since, the input is null element.


Explanation :
* we first declare variables 'i' and 'temp' in int datatype.
* run the loop from i=o to n-1
* then, check whether 'i' is even or odd.
	:- If i is even then, if 'arr.prev > arr.next', then:
				temp stores the value of arr.next
				arr.next stores the value of arr.prev
				arr.prev stores the value of temp
	:- If i is odd then, if 'arr.prev < arr.next', then: 
				temp stores the value of arr.prev
				arr.prev stores the value of arr.next
				arr.next stores the value of temp
* After checking the above two conditions, it will return the correct output.